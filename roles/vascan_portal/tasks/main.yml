---
# Install MySQL Database
- name: Create databases in MySql
  become: true
  mysql_db:
    name    : '{{ vascan_db.name }}'
    state   : present

- name: Create database users
  become: true
  mysql_user:
    name  : '{{ vascan_db.user }}'
    password: '{{ vascan_db.password }}'
    priv  : '{{ vascan_db.name }}.*:ALL'
    host  : '{{ vascan_db.host }}'
    state : present

- name: Copy db files
  become: true
  copy:
    src     : '{{ vascan_db.src }}'
    dest    : '{{ vascan_db.dest }}'

- name: Restore MySQL Database from file
  become: true
  mysql_db:
    name    : '{{ vascan_db.name }}'
    state   : import
    target  : '{{ vascan_db.zip }}'
  notify: restart mysql

- name: Retrieve Taxon count from MySQL
  command: >
    mysql -u{{ vascan_db.user }} -p{{ vascan_db.password }} {{ vascan_db.name }}
    --skip-column-names --silent
    -e"SELECT count(*) from taxon"
  register: mysql_taxon_count
  no_log: true
  changed_when: False

- name: Retrieve Vernacular count from MySQL
  command: >
    mysql -u{{ vascan_db.user }} -p{{ vascan_db.password }} {{ vascan_db.name }}
    --skip-column-names --silent
    -e"SELECT count(*) from vernacularname"
  register: mysql_vernacular_count
  no_log: true
  changed_when: False

- name: Create application directory structure
  become: true
  file: 
    path: "{{ tomcat_webapps }}"
    state: directory
    owner: '{{ tomcat_user }}'

- name: Install Maven
  become: true
  apt:
    pkg: maven
    state: present
    update_cache    : yes

- name: Install jq (lightweight and flexible command-line JSON processor)
  become: true
  apt:
    pkg: jq
    state: present
    update_cache    : yes

- name: Clone Vascan and dependencies (canadensys-data-access)
  git:
    repo: '{{ item.value.repo }}'
    dest: '{{ item.value.checkout_dir }}'
    version: '{{ item.value.version }}'
    depth: 1
  with_dict: '{{ source_dict }}'

- name: Build canadensys-data-access locally
  command: mvn install
  args:
    chdir: '{{ source_dict.data_access.checkout_dir }}'

- name: Create Vascan config
  template:
     src: vascan-config.properties.j2
     dest: '{{ source_dict.vascan.checkout_dir }}/config/production/vascan-config.properties'

- name: Create Vascan log4j config
  template:
    src     : 'vascan_log4j.xml.j2'
    dest    : '{{ source_dict.vascan.checkout_dir }}/src/main/resources/log4j.xml'

- name: Build Vascan (without running tests)
  shell: ./gradlew clean buildProductionQuiet -x test
  args:
    chdir: '{{ source_dict.vascan.checkout_dir }}'

- name: Install unzip
  become: true
  apt:
    pkg: unzip
    state: present
    update_cache    : yes

- name: Download and extract MySql Java Connector for ElasticSearch River plugin
  unarchive:
    src: '{{ mysql_java_connector_url }}'
    dest: '{{ tmp_dest }}'
    remote_src: yes

- name: Move MySQL Java Connector for ElasticSearch River plugin
  copy:
    remote_src: yes
    src     : '{{ tmp_dest }}/{{ mysql_java_connector_version }}/{{ mysql_java_connector_jar }}'
    dest    : '{{ elasticsearch_plugindir }}/jdbc-river'
    owner   : '{{ elasticsearch_user }}'
    group   : '{{ elasticsearch_user }}'

# using curl since posting a file is not supported by the uri module
- name: Create ElasticSearch Index
  shell: 'curl  -XPOST -s "{{ elastic_search.host }}:{{ elastic_search.port }}/vascan" \
                -d @{{ elastic_search.create_index }}'
  args:
    warn: false

- name: Retrieve counts from ElasticSearch
  shell: >
    curl -XGET -s {{ elastic_search.host }}:{{ elastic_search.port }}/vascan/{{ item.key }}/_count | jq .count
  register: es_count_output
  with_dict: '{{ elastic_search_rivers }}'
  changed_when: False

- name: Creating the dict for ElasticSearch counts
  set_fact:
    es_counts: "{{ es_counts|default({}) | combine({item.item.key: item.stdout }) }}"
  with_items:
    - "{{ es_count_output.results }}"
  changed_when: False

- name: Prepare ElasticSearch Rivers files
  template:
     src: elastic_search_river.json.j2
     dest: '{{ tmp_dest }}/es_river_{{ item.key }}.json'
  with_dict: '{{ elastic_search_rivers }}'

# using curl since posting a file is not supported by the uri module
- name: Create ElasticSearch Taxon River
  shell: 'curl  -XPOST -s "{{ elastic_search.host }}:{{ elastic_search.port }}/_river/{{ elastic_search_rivers.taxon.name }}/_meta" \
                -d @{{ tmp_dest }}/es_river_taxon.json'
  args:
    warn: false
  when: es_counts['taxon']|int == 0

- name: Waiting until ElasticSearch Taxon count is matching MySQL (retry is expected here)
  shell: curl -XGET -s {{ elastic_search.host }}:{{ elastic_search.port }}/vascan/taxon/_count | jq .count
  register: current_taxon_count
  when: es_counts['taxon']|int == 0
  until: current_taxon_count.stdout|int == mysql_taxon_count.stdout|int
  delay: 5
  retries: 25

- name: Remove ElasticSearch Taxon River
  shell: 'curl  -XDELETE -s {{ elastic_search.host }}:{{ elastic_search.port }}/_river/{{ elastic_search_rivers.taxon.name }}/'
  args:
    warn: false
  when: es_counts['taxon']|int == 0

- name: Create ElasticSearch Vernacular River
  shell: 'curl  -XPOST -s "{{ elastic_search.host }}:{{ elastic_search.port }}/_river/{{ elastic_search_rivers.vernacular.name }}/_meta" \
                -d @{{ tmp_dest }}/es_river_vernacular.json'
  args:
    warn: false
  when: es_counts['vernacular']|int == 0

- name: Waiting until ElasticSearch Vernacular count is matching MySQL (retry is expected here)
  shell: curl -XGET -s {{ elastic_search.host }}:{{ elastic_search.port }}/vascan/vernacular/_count | jq .count
  register: current_vernacular_count
  when: es_counts['vernacular']|int == 0
  until: current_vernacular_count.stdout|int == mysql_vernacular_count.stdout|int
  delay: 5
  retries: 25

- name: Remove ElasticSearch Vernacular River
  shell: 'curl  -XDELETE -s {{ elastic_search.host }}:{{ elastic_search.port }}/_river/{{ elastic_search_rivers.vernacular.name }}'
  args:
    warn: false
  when: es_counts['vernacular']|int == 0

- name: Move Vascan WAR to Tomcat
  become: true
  copy:
    remote_src: yes
    src     : '{{ source_dict.vascan.checkout_dir }}/build/libs/vascan-{{ vascan_version }}.war'
    dest    : '{{ tomcat_webapps }}/vascan.war'
    owner   : '{{ tomcat_user }}'
  notify: restart tomcat8
