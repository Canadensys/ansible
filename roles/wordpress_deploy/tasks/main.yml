---
# Database
- name: Restart mysql if needed
  become: true
  service:
    name    : '{{ mysql }}'
    state   : restarted

- name: Create WordPress database
  become: true
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name    : '{{ wp_db_name }}'
    state   : present

- name: Create WordPress database user
  become: true
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name  : '{{ wp_db_user }}'
    password: '{{ wp_db_password }}'
    priv  : '{{ wp_db_name }}.*:ALL'
    host  : '{{ wp_db_host }}'
    state : present

- name: Upload db files
  become: true
  copy:
    src     : '{{ wp_db_src }}'
    dest    : '{{ wp_db_zip }}'
    force   : true

#- name: Download database
#  become: true
#  get_url:
#    url  : '{{ wp_db_url }}'
#    dest : '{{ tmp_dest }}'
#    checksum: md5:'{{ wp_db_md5sum }}'
#    #force: true

- name: Restore Database
  become: true
  mysql_db:
    name    : '{{ wp_db_name }}'
    state   : import
    target  : '{{ wp_db_zip }}'
  notify: restart mysql
# Files
- name: Ensures website dir exists
  become: true
  file:
    path    : '{{ wp_final }}'
    owner   : '{{ wp_user_name }}'
    group   : '{{ wp_user_group }}'
    state   : directory
  
- name: Test if $user is here
  become: true
  user:
    name    : '{{ wp_user_name }}'
    state   : present
  register: wp_user_here
  
#- name: stop process
#  become: true
#  service: name={{ item }} state=stopped
#  with_items:
#    - mysql
#    - nginx
#    - php7.0-fpm
#  when: ("'{{ wp_home }}' not in '{{ wp_user_here.home }}'") and ('present' in '{{ wp_user_here.state }}')
  
#- name: Download WordPress
#  become: true
#  get_url:
#    url  : '{{ wp_url }}'
#    dest : '{{ wp_zip }}'
#    checksum: md5:'{{ wp_md5sum }}'
#    #force: true

- name: Upload Wordpress files
  become: true
  copy:
    src     : '{{ wp_src }}'
    dest    : '{{ wp_zip }}'
    force   : true

- name: Extract WP archive
  become: true
  unarchive:
    src : '{{ wp_zip }}'
    dest: '{{ wp_final }}'
    remote_src: yes

- name: Fetch random salts for WordPress config
  become: true
  local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
  register: wp_salt

- name: WordPress config file
  become: true
  template:
    src     : '{{ wp_config_file }}'
    dest    : '{{ wp_final }}/wp-config.php'
    force   : true

- name: Change ownership of WordPress installation
  become: true
  file:
    path    : '{{ wp_home }}'
    owner   : '{{ wp_user_name }}'
    group   : '{{ wp_user_group }}'
    state   : directory
    mode    : u+rwx,g+rws,o-rwx
    recurse : yes
# Mount in user home
- name: Mount server in home user
  become: true
  mount:
    name    : '{{ wp_user_web }}/{{ wp_name }}'
    src     : '{{ wp_home }}'
    fstype  : auto
    opts    : bind
    passno  : 2
    state   : mounted

# Nginx
- name: Nginx Copy configuration for wordpress
  become: true
  template:
    src : '{{ wp_nginx_src }}'
    dest: '{{ wp_available }}'
  notify: restart nginx

- name: Nginx Create symlink to enabled
  become: true
  file:
    src  : '{{ wp_available }}'
    dest : '{{ wp_enabled }}'
    state: link
  notify: restart nginx

# PHP
- name: Php-fpm copy configuration 16.04
  become: true
  template:
    src : '{{ wp_php_conf_file_source }}'
    dest: '{{ php_pool_dir }}/{{ wp_php_conf_file_dest }}'
  notify: restart php-fpm
  when: ansible_distribution_version == "16.04"

- name: Php-fpm copy configuration 14.04
  become: true
  template:
    src : '{{ wp_php_conf_file_source }}'
    dest: '{{ php5_pool_dir }}/{{ wp_php_conf_file_dest }}'
  notify: restart php5-fpm
  when: ansible_distribution_version == "14.04"

# Backup
- name: Copy backup script in crondir and executable
  become: true
  template:
    src:    '{{ wp_backup_src }}'
    dest:   '{{ wp_cron }}'
    mode:   0754
    owner   : '{{ bk_user }}'
    group   : '{{ bk_group }}'

- name: Creates weekly backup cronjob
  become: true
  cron: minute={{ item.value.cron_min }} hour={{ item.value.cron_hour }}
        name={{ item.value.cron_name }}
        cron_file={{ item.value.cron_file }}
        user={{ item.value.user }}
        job={{ wp_cron }}
  with_dict: "{{ wp_backup_dict }}"

- name: Restart programs
  become: true
  service: name='{{ item }}' state=restarted
  with_items:
    #- '{{ php }}'
    - '{{ nginx }}'
    - '{{ mysql }}'
